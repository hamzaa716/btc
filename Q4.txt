To handle the situation where Bitcoin prices change regularly, and you want to ensure that your app always has up-to-date data, you can implement periodic data updates from the server. Here's how you can achieve this:

1. **Background Fetch/Update**: Set up background fetch or scheduled tasks to periodically check for updated Bitcoin prices. This can be done using a package like `react-native-background-fetch` or any other background task management library. These tasks can run even when the app is not in the foreground.

2. **Push Notifications**: Additionally, you can use push notifications to alert users when new data is available. When the server-side developer updates the data, they can send a push notification to your app, prompting it to fetch the latest data.

3. **Manual Refresh**: Provide a manual refresh option to users. Allow them to pull to refresh the data or press a refresh button to fetch the latest data on demand.

4. **Caching Strategy**: Implement a caching strategy where you keep a cache of the latest data for quick access while also fetching the latest data periodically or when triggered by the user.

5. **Data Versioning**: Consider versioning your data, so your app can determine if the data is outdated and needs to be updated.

6. **Server-Side Update Notifications**: Collaborate with your server-side developer to implement a notification mechanism that informs your app when data has been updated on the server. This can be achieved through webhooks or other real-time communication methods.

7. **Offline Mode Handling**: Implement a strategy to handle data access when the app is offline or in poor network conditions. Use locally cached data when the network is unavailable, and update it when the network becomes available.

8. **Optimize Data Transfer**: Minimize data transfer by sending only the changes or differences from the server to the app, rather than the entire dataset.

By following these suggestions, you can ensure that your app has access to the most current Bitcoin price data while providing a smooth and responsive user experience. The specific implementation details will depend on your app's architecture, the capabilities of your server, and your project's requirements.